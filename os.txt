# 운영체제

사용자의 하드웨어, 시스템 리소스를 제어하고 프로그램에 대한 일반적 서비를 지원하는 시스템 소프트웨어.
시스템 하드웨어를 관리할 뿐 아니라 응용 소프트웨어를 실행하기 위하여 하드웨어 추상화 플랫폼과 공통 시스템 서비스를 제공.
'플랫폼 소프트웨어'라고 부르기도함.


# 운영체재의 대표적인 역할들
- 프로세스 관리: 시스템 내에서 실행 중인 프로세스를 효율적으로 관리하고 제어
- 메모리 관리: 사용자가 사용할 다양한 데이터를 메모리에 적절하게 배치
- 파일 시스템 관리: 사용자 및 응용 프로그램이 데이터를 효율적으로 저장, 관리 및 엑세스


# 운영체제의 구조
- 응용프로그램: 운영체제와 시스템 콜을 통해 하드웨어와 상호작용
- 시스템 콜: 시스템 콜을 호출하여 운영체제에게 특정 작업을 요청
- 운영체제: 사용자 및 응용 프로그램에게 서비스를 제공
- 커널: 시스템 콜을 처리하고, 하드웨어와 상호작용하며, 프로세스 및 자원 관리 등의 기능을 담당
    - CLI: 텍스트 기반 인터페이스, 사용자가 명령어를 입력하여 컴퓨터와 상호작용
    - GUI: 그래픽 기반 인터페이스, 사용자가 마우스를 사용하여 그래픽 요소를 클릭하고 조작
- 하드웨어: 운영체제와 응용 프로그램이 실행되고 동작하는 데 필요한 리소스를 제공
- 드라이버: 특정 하드웨어 장치를 제어하고 관리


# 컴퓨터 하드웨어 구성
- CPU: 중앙 처리 장치, 컴퓨터의 연산과 제어를 담당
    - ALU: 산술 논리 장치, 산술 연산과 논리 연산을 수행
    - CU: 제어 장치, 명령어의 해독과 실행을 조정
    - Register Set: CPU 내부에 있는 레지스터, 데이터나 주소 등을 일시적으로 저장
- Main Memory: 주 기억 장치, 프로그램과 데이터를 저장하며 CPU에 빠르게 접근
- 버스 시스템: 데이터, 주소, 제어 신호 등을 전송하기 위한 통신 경로, CPU, 메모리, 입출력 장치 간의 데이터 전달


# CPU -> 주요 레지스터
- 프로그램 카운터: 메모리에서 가져와서 실행할 다음 명령의 주소를 일시적으로 저장하는 레지스터
- 인스트럭션 레지스터: 해석해야할 명령어를 저장하는 레지스터
- 어드레스 레지스터: 메모리에 주소를 저장하는 레지스터
- 버퍼 레지스터: 메모리에 읽거나 쓰려는 데이터나 명령을 일시적으로 저장하는 레지스터
- 플래그 레지스터: 연산결과, CPU 상태에 대한 부가적인 정보를 저장하는 레지스터
- 스택 포인터: 다음 써야할 데이터가 어디있는지 알려줌


# 클럭 펄스
- 컴퓨터 시스템에서 클럭 펄스는 CPU의 작업 속도를 결정하고, 명령어의 실행 및 데이터 전송을 동기화


# 프로그램의 실행과정
- 프로그램 코드 > 어셈블리 코드 > 바이너리 코드
    - 바이너리 실행코드
    > 실행파일이 생성 > 보조메모리에 저장 > 실행 > 메인 메모리 > CPU에 의해 순차적으로 실행 > 아래 세가지로 수행
    > 1. Fetch: 메모리상에 존재하는 명령어를 CPU로 가져오는 작업
    > 2. Decode: 가져온 명령어를 CPU가 해석 (CU가 그역할을 담당)
    > 3. Execution: 해석된 명령어의 명령대로 CPU가 작업을 수행


# 데이터 이동 (시스템 버스)
- 데이터 버스: 데이터 이동을 위해 필요한 버스
- 컨트롤 버스: CPU가 원하는 바를 메모리에 전달하기 위한 버스
- 어드레스 버스: 주소값을 이동하기 위해 필요한 버스



# 인터럽트
- CPU가 어떤 작업을 수행하고 있을때 CPU의 작업을 방해하는 신호

# 하드웨어 인터럽트
- 입출력 장치(하드웨어)로부터 발생하는 인터럽트는 '비동기 입터럽트'라고 표현

# 인터럽트 핸들링
- 인터럽트가 발생하면, 인터럽트에 대응하는 무언가가 동작, 이를 '인터럽트 서비스 루틴'이라 표현

# 인터럽스 서비스 루틴
- 인터럽트를 처리하기 위해 특정 인터럽트 신호에 대해 미리 정의되어 있는 프로그램 또는 함수이다.


# 프로세스
'실행 중인 프로그램'
실행 파일 > 프로그램 / 실행된 파일 > 프로세스
운영체제가 관리하는 하나의 객체라고 할 수 있음


# 프로세스 구조
- 명령어가 담긴 코드 영역
- 전역변수 등이 담긴 데이터 영역
- 지역변수 등이 담긴 스택 영역
- 동적 메모리 할당을 위한 힙 영역


# Process Control Block
- CPU는 한 번에 하나의 연산만 수행
- CPU는 여러 개의 프로세스를 동시에 실행하지 않고, 빠르게 번갈아 가며 실행
- 운영체제는 프로세스 컨트롤 블록, PCB를 만들어 관리
    - 여기에는 프로세스를 식별하기 위해 필요한 정보들이 저장됨
    - 프로세스 ID, 레지스터 데이터, 스케줄링 정보, 상태 등


# 멀티 프로세스 운영체제
- 여러 개의 프로세스를 관리해가며, 마치 동시에 실행되는 것처럼 운영할 수 있는 운영체제
    - 여러 개의 프로세스를 관리하는 것은 운영체제에게 부담되는 일이다.


# 컨텍스트 스위칭
- 프로세스를 실행하는중에 다른 프로세스를 실행하기 위해 실행중인 프로세스 상태를 저장하고 다른 프로세스의 데이터로 교체하는 방법(문맥교환)


# 프로세스 생성
- 새로운 프로세스를 생성하는 것보다, 기존 프로세스를 복사하는것이 더 빠르다. 따라서 모든 프로세스는 최초의 프로세스로부터 복사된다.


# 스레드(Thread)
- 프로세스를 존재하는 프로세스 구성원으로 프로세스가 처리하는 작업의 실행단위
- 스레드는 프로세스 안에 여러개 존재 가능
# 스레드 특징
- 스레드가 하나 생성될 때마다 스레드를 위한 스택 영역이 추가로 생성될뿐, 그 외 영역은 프로세스의 영역을 공유
- 프로세스가 처리해야 할 작업을 수행하기 위해 존재하는것이므로, 코드 영역을 공유해 명령어에 접근할 수 있어야 한다.
- 명령어 실행 시 전역변수, 정적변수, 지역변수 등의 데이터에 접근해야 하므로 데이터 영역과 힙 영역도 공유해야 한다.


# 큐 자료구조 동작
- 운영체제는 준비 상태의 프로세스와 대기 상태의 프로세스를 관리하기 위해 큐(Queue) 자료구조를 사용


# 스케줄링 알고리즘
- 스케줄링 알고리즘 적용 시, 고려사항
    - 부하가 최소화되어야 한다.
    - 컴퓨팅 자원을 효율적으로 사용해야 한다.
    - 균형잡힌 스케줄링을 해야 한다.
    - 대기 및 응답 시간이 너무 길어서는 안 된다.

# 스케줄링 알고리즘 종류
- 선입선출: 준비 큐에 삽입된 순서대로 프로세스들을 처리
- 최단 작업 우선: 실행시간 짧은 프로세스부터 처리
- 라운드 로빈: 정해진 타임슬라이스만큼만 CPU를 점유하고 시간이 다 지나면 조금 쉬어가는 패턴
- 우선순위 스케줄링: 프로세스에 우선순위를 할당하여 실행하는 방식


# 메일슬롯 방식
- 메일슬롯 방식의 IPC는 데이터를 받기 위해서 프로세스가 우체통 역할을 하는 객체를 마련하고 이를 통해 데이터를 주고받는 방식

# 파이프 방식
- 파이브 방식의 IPC는 익명 파이프 또는 네임드 파이프를 이용해 데이터를 주고받는다. 익명 파이프는 서로 관계가 있는 프로세스 간에 통신을 할때 사용하는 단방향 파이브이고, 네임드 파이프는 프로세스 간에 양방향 통신을 할때 사용하는 파이프이다.


# 동기화
- 프로세스들은 서로 독립적이지만, 프로세스 간 통신을 하거나 같은 대상에 대한 작업을 함으로써 협력할 수 있다. 그런데 이때, 동시다발적으로 작업을 처리하면 문제가 발생할 수 있다.


# 공유자원
- 프로세스 간 통신에서는 공동으로 이용하는 변수가 파일, 입출력 기기 등이 존재한다.
# 임계구역
- 프로세스가 동시에 실행할 경우 문제가 발생할 수 있는 영역


# 상호 배제
- 하나의 프로세스가 임계구역에 들어갔다면 다른 프로세스는 임계구역에 들어갈 수 없다는 조건
# 뮤텍스 락
- 동시에 여러 스레드가 공유 자원에 접근하는 것을 제어하기 위한 동기화 메커니즘 중 하나
# 세마포어
- 프로세스나 스레드 간의 동기화에 사용되는 카운팅 기반의 동기화 객체


# 데드락
- 프로세스들이 서로를 기다리면서 진행이 멈춰있는 상태
# 데드락 발생조건
- 상호배제 / 비선점 / 점유 및 대기 / 원형 대기


# 메모리 계층
- 레지스터 > 캐시(L1/L2) > 메인 메모리(RAM) > 보조기억장치(HDD/SSD)


# 메모리 할당 방식
- 가변 분할 방식: 미리 정해진 크기의 파티션으로 나누는 방법
    - 각 파티션은 고정된 크기를 가지며, 운영 체제는 이러한 파티션 각각에 프로세스를 할당
- 고정 분할 방식: 메모리를 프로세스의 요구에 따라 동적으로 나누는 방법
    - 프로세스가 메모리를 요청하면, 운영 체제는 그 크기에 맞는 적절한 크기의 공간을 할당


# 스와핑
- 실행 상태의 프로세스는 메인 메모리에 올리고, 실행 상태가 아닌 프로세스들은 보조 장치에 따로 마련된 스왑 영역에 올린 다음 프로세스의 상태 변화에 따라 두 공간 사이에서 프로세스가 이동하는(교환되는) 것


# 가상 메모리 관리
- 페이징: 고정분할방식이라고도 하는 페이징 기법
    메모리 공간을 일정한 크기의 페이지로 나누어 다룬다.
- 페이지 테이블 엔트리
    - 접근비트: 페이지가 메모리에 올라온 후 데이터에 접근이 있었는지
    - 변경비트: 페이지가 메모리에 올라온 후 데이터의 변경이 있었는지
    - 유효비트: 페이지가 어디에 있는지
    - 보호비트: 페이지에 대한 읽기, 쓰기, 실행 권한이 어떻게 되는지
- 페이지드 세그멘테이션: 가변 분한 방식과 고정 분할 방식을 혼합한 가상 메모리 관리 방식


# 요구 페이징
- CPU가 특정 페이지에 접근하는 명령어를 실행했을 때, 해당 페이지가 스왑 영역에 있어서 당장 실행시킬 수 없는 상태일 경우에는 '페이지 폴트' 예외가 발생한다.
- 페이지 폴트 예외가 발생하면 스와핑 작업이 먼저 진행된 후에 프로세스가 실행된다.
- 실행할 모든 프로세스를 메모리에 올려두는 것은 시스템에 부담이 될 수 있는 만큼 당장 필요한 페이지만을 메모리에 우선 적재하는 방법을 가리켜 '요구 페이징'이라고 한다.


# 페이지 교체 정책
- 선입선출: 메모리에 들어온 시간이 가장 오래된 케이스를 선택
- 최적 페이지 교체: CPU에 의해 참조되는 횟수를 고려해서 자주 사용될 예정인 페이지를 내버려두고, 사용이 거의 되지 않을 예정인 페이지를 교체
- LRU: 최근 사용 빈도가 가장 적은 페이지를 선택


# 스레싱(thrashing)
- 프레임이 부족하면 페이지 폴트가 자주 발생한다. 페이지 폴트가 발생하면 잦은 스와핑 작업으로 인해 CPU 사용률이 떨어지게 된다.
- CPU 사용률이 떨어지면 운영체제는 더많은 프로세스를 메모리에 올리려 하고, 이는 더 잦은 페이지 폴트로 이어져 악순환에 빠지게 된다. 이러한 문제를 '스레싱'이라고 한다.


# 파일
- 의미있는 정보들을 한 덩어리로 모아 둔 논리적 단위로써, 보조기억장치에 저장된다.

# 파일의 구성요소
- 파일 이름 / 파일 실행에 필요한 정보 / 메타데이터

# 메타데이터, 파일유형
- 문서 > ppt, doc, xls, hwp, txt, pdf, psd
- 이미지 > bmp, gif, jpg, png, raw, tiff
- 소리 및 영상 > wav, wma, mp3, mp4, avi, mov
- 압축파일 > 7z, zip, alz, egg, rar

# 파일 연산을 위한 시스템 호출
- 파일을 다루는 모든 작업은 운영체제에 의해 이루어진다. 따라서 응용프로그램이 파일에 접근하려면 시스템 호출을 제공받아야 한다.
- 파일 생성 / 파일 열기 / 파일 읽기 / 파일 쓰기 / 파일 닫기 / 파일 삭제


# 디렉터리
- 운영체제는 파일을 정돈할 수 있도록 디렉터리를 지원한다.
- 디렉터리는 한 개 이상의 파일을 가질 수 있고, 한 개 이상의 디렉터리도 가질 수 있다.
- 디렉터리와 디렉터리는 부모와 자식 관계를 형성할 수 있다.
- 최상위 디렉터리는 "루트 디렉터리" 라고함.
    - 윈도우
        - 절대경로: >C:\User\username
        - 상대경로: >..\folder\document.txt
    - 유닉스기반
        - 절대경로: /Users/username/Documents
        - 상대경로: ../directory/document.txt
- 일반 파일에는 데이터가 저장되어 있지만, 디렉터리에는 파일 정보가 저장되어 있다.
- 디렉터리에 저장된 파일 정보는 테이블 형태로 관리된다. 테이블의 행 하나하나를 가리켜 디렉터리 엔드리라고 부른다.


# 파일 할당 방법
- 하나의 파일은 여러 개의 블록으로 이루어져 있다.
- 블록을 메모리에 할당할 때는 연속 방식 또는 불연속 방식을 사용할 수 있다.


# 스레드 풀(Thread Pool)
- 특정 개수의 스레드가 여러 개의 일을 차례대로 수행하도록 하는 기법
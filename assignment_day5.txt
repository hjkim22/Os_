연속할당 설명 시에 언급했던 '연결리스트' 자료구조에 대해 조사하고 정리.
____________________________________

연결 리스트(linked list)는 데이터 요소들을 선형으로 저장하는 자료구조이다. 이 자료구조에서 각 요소는 데이터와 다음 요소를 가리키는 포인터로 이루어져 있다. 연결 리스트는 배열과 달리 메모리의 연속된 위치에 요소를 저장하지 않으며, 각 요소들은 메모리의 어디든 위치할 수 있다. 이러한 특성으로 인해 요소의 삽입, 삭제, 이동 등이 배열에 비해 빠르게 이루어질 수 있다.

연결 리스트는 대표적으로 세 가지 종류로 구분된다.
단일 연결 리스트(Singly Linked List): 각 노드가 데이터와 다음 노드를 가리키는 포인터로 이루어져 있다. 마지막 노드는 보통 null을 가리킨다.
이중 연결 리스트(Doubly Linked List): 각 노드가 데이터와 이전 노드와 다음 노드를 가리키는 포인터로 이루어져 있다. 이로써 리스트의 양쪽 끝에서의 삽입, 삭제, 탐색 등이 용이해진다.
환형 연결 리스트(Circular Linked List): 마지막 노드가 첫 번째 노드를 가리키는 단일 연결 리스트이다. 환형 연결 리스트는 특별한 종류로, 순환하는 데이터 구조를 구현할 때 유용하다.

연결 리스트의 장단점은 다음과 같다.
장점:
데이터의 삽입, 삭제가 배열에 비해 효율적이다. 연결 리스트는 요소의 이동 없이도 삽입 및 삭제가 가능하다.
동적으로 크기가 조절될 수 있다. 필요에 따라 요소를 추가하거나 삭제할 수 있다.

단점:
특정 위치의 요소에 접근하기 위해서는 처음부터 순차적으로 탐색해야 한다. 이는 탐색에 O(n)의 시간이 걸리는 단점으로 작용한다.
포인터를 사용하기 때문에 각 요소마다 추가적인 메모리가 소요된다.
메모리의 불연속적인 할당으로 인해 캐시의 효율이 저하될 수 있다.
연결 리스트는 주로 데이터의 삽입, 삭제가 빈번하고 크기가 동적으로 변경될 때 사용된다. 따라서 삽입 및 삭제가 빈번하거나 사이즈가 변경될 수 있는 상황에서는 배열보다 연결 리스트가 더 효율적일 수 있다.